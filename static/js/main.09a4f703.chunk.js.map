{"version":3,"sources":["contants/contant-types.js","containers/User.js","action/index.js","components/Sidebar.js","components/Empty.js","components/Header.js","containers/Chats.js","containers/InputMessage.js","containers/ChatWindow.js","components/Main.js","containers/App.js","serviceWorker.js","static-data.js","reducer/index.js","reducer/user.js","reducer/contacts.js","reducer/messages.js","reducer/typing.js","reducer/activeUserId.js","store/index.js","index.js"],"names":["SET_ACTIVE_USER_ID","SET_TYPING_VALUE","SEND_MESSAGE","User","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUserClick","bind","assertThisInitialized","setActiveUserId","user","user_id","_this$props$user","name","profile_pic","status","react_default","a","createElement","className","onClick","src","alt","Component","connect","dispatch","value","type","payload","Sidebar","contacts","map","contact","src_containers_User","key","Empty","first_name","split","Header","_ref","Chat","message","text","is_user_msg","concat","Chats","scrollToBottom","chatRef","current","scrollTop","scrollHeight","React","createRef","ref","messages","Chats_Chat","number","sendMessage","typing","activeUserId","userId","setTypingValue","eventTarget","onSubmit","e","preventDefault","onChange","target","placeholder","ChatWindow","_this$props","activeUser","activeMessages","Header_Header","Chats_Chats","_","values","containers_InputMessage","Main","ChatWindow_ChatWindow","Empty_Empty","activeUserid","renderMainComponent","state","Sidebar_Sidebar","Main_Main","Boolean","window","location","hostname","match","numberOfUsers","shortid","require","txtgen","faker","users","Array","from","length","generateUser","mapKeys","getMessages","messagesPerUser","forEach","numberOfMsgs","objectSpread","v","i","sentence","random","boolean","findName","email","internet","avatar","generate","combineReducers","arguments","undefined","initialState","action","_action$payload","userMessages","keys","pop","assign","defineProperty","store","createStore","reducer","applyMiddleware","logger","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09a4f703.chunk.js","sourcesContent":["export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\";","import React, {Component} from \"react\";\r\nimport {setActiveUserId} from \"../action\"\r\nimport {connect} from \"react-redux\";\r\nimport \"./User.css\";\r\n\r\n class User extends Component{\r\n     constructor(props){\r\n         super(props);\r\n         this.handleUserClick = this.handleUserClick.bind(this);\r\n     }\r\n    handleUserClick(){\r\n        this.props.setActiveUserId(this.props.user.user_id);\r\n    }\r\n    render(){\r\n        const {name, profile_pic, status} = this.props.user\r\n        return(\r\n            <div className=\"user\" onClick={this.handleUserClick}>\r\n                <img src={profile_pic} alt={name} className=\"user_img\"/>\r\n                <div className=\"user_details\">\r\n                    <p className=\"user_name\">{name}</p>\r\n                    <p className=\"user_status\">{status}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return{\r\n        setActiveUserId : (value) => dispatch(setActiveUserId(value))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(User);","import {SET_ACTIVE_USER_ID, SET_TYPING_VALUE, SEND_MESSAGE} from \"../contants/contant-types\";\r\n\r\nexport const setActiveUserId = (id) =>{\r\n    //do something here\r\n    return {\r\n        type: SET_ACTIVE_USER_ID,\r\n        payload:id\r\n    }\r\n}\r\n\r\nexport const setTypingValue = (value)=>{\r\n    return{\r\n        type:SET_TYPING_VALUE,\r\n        payload:value\r\n    }\r\n}\r\n\r\nexport const sendMessage = (message, userId)=>{\r\n    return {\r\n        type:SEND_MESSAGE,\r\n        payload:{message, userId}\r\n    }\r\n}","import React,{ Component } from 'react';\r\nimport User from \"../containers/User\"\r\nimport \"./Sidebar.css\";\r\n\r\nexport default class Sidebar extends Component{\r\n    \r\n    render(){\r\n        return(\r\n            <aside className=\"sidebar\">{this.props.contacts.map(\r\n                (contact) => (\r\n                    <User key={contact.user_id} user={contact}/>\r\n                )\r\n            )}</aside>\r\n        )\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport \"./Empty.css\" ;\r\n\r\nexport default class Empty extends Component{\r\n    render(){\r\n        const {name, profile_pic, status}= this.props.user;\r\n        const first_name =  name.split(\" \")[0];\r\n        return(\r\n            <div className=\"empty\">\r\n                <h1 className=\"empty_name\"> Welcome, {first_name}</h1>\r\n                <img src={profile_pic} alt={name} className=\"empty_img\"/>\r\n                <p className=\"empty_status\">\r\n                <b>Status:</b>{status}\r\n                </p>\r\n                <button className=\"empty_btn\"> Start a converstion</button>\r\n                <p className=\"empty_info\"> Search for someone to start chatting with or go to the \r\n                contacts to see who is available.</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\nexport default function Header({user}){\r\n    const {name, status} = user;\r\n    return(\r\n        <header className=\"Header\">\r\n            <h1 className=\"header_name\">{name}</h1>\r\n            <p className=\"header_status\">{status}</p>\r\n        </header>\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport \"./Chats.css\";\r\n\r\n const Chat = ({message})=>{\r\n    const {text, is_user_msg} = message;\r\n    return(\r\n        <span className={`chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}\r\n        >{text}</span>\r\n    );\r\n }\r\n\r\nexport default class Chats extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.chatRef = React.createRef();\r\n       \r\n    }\r\n\r\n    scrollToBottom = ()=>{\r\n        this.chatRef.current.scrollTop = this.chatRef.current.scrollHeight;\r\n    }\r\n    componentDidMount(){\r\n        this.scrollToBottom();\r\n    }\r\n    componentDidUpdate(){\r\n        this.scrollToBottom();\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"chats\" ref={this.chatRef}>\r\n                    {this.props.messages.map(message => {\r\n                    return(\r\n                        <Chat message={message} key={message.number}/>\r\n                    );\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {setTypingValue, sendMessage}  from \"../action\"\r\nimport \"./InputMessage.css\"\r\n\r\nfunction InputMessage({typing, activeUserId, value,sendMessage,setTypingValue}){\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        sendMessage(typing, activeUserId);\r\n    }\r\n    const handleInput = e => {\r\n       setTypingValue(e.target.value);\r\n    }\r\n    return(\r\n        <form className=\"message\" onSubmit={handleSubmit}>\r\n            <input className=\"message_input\" onChange={handleInput} value={value} placeholder=\"write a message\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        sendMessage: (typing, activeUserId) =>dispatch(sendMessage(typing, activeUserId)),\r\n        setTypingValue : (eventTarget) => dispatch(setTypingValue(eventTarget)) \r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(InputMessage);","import React, {Component} from \"react\";\r\nimport \"./ChatWindow.css\" ;\r\nimport _ from \"lodash\";\r\nimport Header from \"../components/Header\";\r\nimport Chats from \"./Chats\"\r\nimport InputMessage from \"./InputMessage\";\r\n\r\nexport default class ChatWindow extends Component{\r\n    render(){\r\n\r\n        const {contacts, messages, typing, activeUserId} = this.props;\r\n        const activeUser = contacts[activeUserId];\r\n        const activeMessages = messages[activeUserId];\r\n        return(\r\n            \r\n            <div className=\"chatWindow\">\r\n                <Header user={activeUser}></Header>\r\n                <Chats messages={_.values(activeMessages)}/>\r\n                <InputMessage typing={typing} activeUserId={activeUserId} value={typing}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{ Component } from 'react'; \r\nimport \"./Main.css\";\r\nimport Empty from \"./Empty\";\r\nimport ChatWindow from \"../containers/ChatWindow\";\r\n\r\n\r\nexport default class Main extends Component{\r\n    renderMainComponent(){\r\n       const {contacts, user, messages,typing, activeUserId} = this.props;\r\n       if(!activeUserId){\r\n           return <Empty user={user} activeUserid={activeUserId}/>\r\n       }\r\n        else{\r\n            return <ChatWindow contacts={contacts} messages={messages} typing={typing} activeUserId={activeUserId}/>\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main\">{this.renderMainComponent()}</div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Sidebar from \"../components/Sidebar\";\nimport Main from \"../components/Main\";\nimport './App.css';\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\n\n\nfunction App(props) {\n  //let {contacts, user, activeUserId}  = store.getState();\n  return (\n    <div className=\"App\">\n      <Sidebar contacts = {_.values(props.contacts)} />\n      <Main {...props}/>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) =>{\n  return {\n    contacts: state.contacts.contacts,\n    user: state.user,\n    typing: state.typing,\n    messages: state.messages,\n    activeUserId: state.activeUserId\n  }\n}\n\nexport default connect(mapStateToProps, null)(App);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}","import contacts from \"./contacts\";\r\nimport user from \"./user\";\r\nimport activeUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\nimport {combineReducers} from \"redux\";\r\n\r\nexport default combineReducers({\r\n    user, contacts, messages, typing , activeUserId\r\n});","import {generateUser} from \"../static-data\";\r\n\r\nexport default function user(state=generateUser(), action){\r\n    return state;\r\n}","import {contacts} from \"../static-data\";\r\n\r\nexport default (initialState = {contacts}, action) => {\r\n    switch(action.type){\r\n        default:\r\n            return initialState;\r\n    }\r\n   \r\n}","import {getMessages} from \"../static-data\";\r\nimport {SEND_MESSAGE} from \"../contants/contant-types\";\r\nimport _ from \"lodash\";\r\n\r\nexport default function messages(state = getMessages(10), action){\r\n    switch(action.type){\r\n        case SEND_MESSAGE:\r\n        const {message, userId} = action.payload;\r\n            const userMessages = state[userId];\r\n            //returns the last key on the user messages objects a adds one to it\r\n            //+ is used to make sure the the final output is a number and not a string \r\n            const number = +_.keys(userMessages).pop() + 1;\r\n            //builds a new state and adds the previous messages plus the new message\r\n            return Object.assign({}, state,{[userId]:{...userMessages, [number]:{number, text:message, is_user_msg:true}}})\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}","import {SET_TYPING_VALUE, SEND_MESSAGE} from \"../contants/contant-types\"\r\n\r\nexport default function typing(state=\"\", action){\r\n    switch(action.type){\r\n        case SET_TYPING_VALUE:\r\n            return action.payload;\r\n        case SEND_MESSAGE:\r\n            return \"\";\r\n        default:\r\n            return state\r\n    }\r\n}","import {SET_ACTIVE_USER_ID} from \"../contants/contant-types\";\r\n\r\nexport default function activeUserId(state=null, action){\r\n    switch(action.type){\r\n        case SET_ACTIVE_USER_ID:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware} from 'redux';\r\nimport reducer from '../reducer';\r\nimport {logger} from \"redux-logger\"\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(logger));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from \"react-redux\";\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}